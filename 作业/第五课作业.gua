const ensure = function(condition, message) {
    // 在条件不成立的时候, 输出 message
    if (not condition) {
        log('*** 测试失败:', message)
    } else {
        log('||| 测试成功')
    }
}

//计算10的倍数
const tans = function(n) {
    var rn = 1
    var i = 0
    while(i < n){
        rn = rn * 10
        i += 1
    }
    return rn
}

//计算填充0的个数，返回字符串
const n_char = function(n) {
    var i = 0
    var str = ''
    while(i < n){
        str += '0'
        i += 1
    }
    return str
}

const n_char2 = function(n, char) {
    var i = 0
    var str = ''
    while(i < n){
        str += char
        i += 1
    }
    return str
}

const zfill = function(n, width) {
    // n 是 数字 类型
    // width 是 数字 类型

    // 把 n 的位数变成 width 这么长，并在右对齐，不足部分用 0 补足并返回
    // 具体请看测试, 注意, 返回 string 类型

    var number = '0123456789'
    var dstr = ''

    //计算数字位数
    var i = 0
    var n1 = n
    while(n1 >= 1){
        n1 = n1 / 10
        i += 1
    }

    var i1 = 0
    //上次计算的数值累计
    var zx = 0
    //余数
    var ys = 0

    while(i1 < i){
        //把12345拆成5，4，3，2，1
        ys = (n - zx) % tans(i1+1)
        zx += ys
        var xb = ys / tans(i1)//得出浮点数下标

        //转为整数下标（这个编译器没有toString，也没有int，float等数据类型，只有var,但测试发现 1.0 和 1 是相等的)
        var i2 = 0
        while(i2 < number.length()){
            if(i2 == xb){
                break
            }
            i2 += 1
        }

        //得出倒的字符串 ( 12345(int) -> 54321(string) )
        dstr += number[i2]

        i1 += 1
    }


    var str = ''

    //计算添加0的个数
    var zeronumber = width - dstr.length()
    if(zeronumber > 0){
        str += n_char(zeronumber)
    }

    //翻转字符串( 54321(string) -> 12345(string) )
    var i3 = dstr.length() - 1
    while(i3 >= 0){
        str += dstr[i3]
        i3 -= 1
    }

    return str
    // 12345
    //n - zx / 1*(n 10)
    // n % 10 = 5
    // n - 5 % (10*10) / 10 = 4
    // n - 5 - (4*10) % (10*10*10) / (10*10) = 3
    // n - 5 - (4*10) - (3*10*10) % (10*10*10*10) / (10*10*10) = 2
    // n - 5 - (4*10) - (3*10*10) - (2*10*10*10) % (10*10*10*10*10) / (10*10*10*10) = 1

    // 提示:
    // 计算 n 的长度, 随后生成一串指定长度的 0, 使两者组合后长度为 width

    // 实现步骤
    // 1. 将 n 转化为字符串并计算长度
    // 2. 在 zfill 函数前, 构建一个辅助函数 n_char, 生成一个长度为 n 的 0 字符串
    // 3. 算出需要填充的 0 的个数并使用 n_char 生成
    // 4. 拼接
}

const rjust = function(s, width, fillchar=' ') {
    // s 是 string
    // width 是 整数
    // fillchar 是 长度为 1 的字符串, 默认为空格 ' '

    // 如果 s 长度小于 width, 则在开头用 fillchar 填充并返回

    // 返回 string 类型

    var str = ''
    var fillnumber = width - s.length()

    var i = 0
    while(i < fillnumber){
        str += fillchar
        i += 1
    }

    str += s
    return str
    // 提示:
    // 类似于作业 1, 但有几个区别
    // 一是不需要先用 string() 转换类型
    // 二是填充的字符不是 0 而是可以自行定义

    // 分步提示：
    // 1. 计算需要用 fillchar 生成的字符串长度
    // 2. 使用作业 1 中的辅助函数 n_char, 修改它以便符合本题的使用
    // 3. 调用修改后的 n_char 生成填充用的字符串
    // 4. 拼接并返回结果
}

const ljust = function(s, width, fillchar=' ') {
    // s 是 string
    // width 是 整数
    // fillchar 是 长度为 1 的字符串, 默认为空格 ' '

    // 如果 s 长度小于 width, 则在末尾用 fillchar 填充并返回
    // 否则, 原样返回, 不做额外处理

    // 返回 string 类型

    var str = ''
    var fillnumber = width - s.length()

    var i = 0
    while(i < fillnumber){
        str += fillchar
        i += 1
    }

    str = s + str
    return str

    // 提示:
    // 类似于作业 2, 区别是填充位置在左侧而不是右侧

    // 实现步骤
    // 1. 复制作业 2 中的代码, 记得把函数名改成 ljust
    // 2. 把作业 2 最后一步的字符串拼接的两个元素调换位置
}

const center = function(s, width, fillchar=' ') {
    // s 是 string
    // width 是 整数
    // fillchar 是 长度为 1 的字符串, 默认为空格 ' '

    // 如果 s 长度小于 width, 则在两边用 fillchar 填充并返回
    // 如果 s 长度和 width 互为奇偶, 则无法平均分配两边的 fillchar
    //     这种情况下, 让左边的 fillchar 数量小于右边

    // 返回 string 类型

    var str = ''
    var fillnumber = width - s.length()
    var ys = fillnumber % 2
    var zbzfn = 0
    var ybzfn = 0
    if(ys > 0){
        zbzfn = (fillnumber - 1) / 2
        ybzfn = zbzfn + 1
    }else{
        zbzfn = fillnumber / 2
        ybzfn = zbzfn
    }

    var zbstr = n_char2(zbzfn , fillchar)
    var ybstr = n_char2(ybzfn , fillchar)

    str = zbstr + s + ybstr
    return str
    // 提示:
    // 需要计算 s 左右两侧字符串的长度后, 分别生成左右填充字符串, 并最终把三者按顺序拼接

    // 实现步骤
    // 1. 计算左右填充字符串的总长度
    // 2. 计算左右填充字符串的长度，注意要是整数
    // 3. 生成左右两个填充字符串
    // 4. 拼接字符串, 并返回结果
}

const is_space = function(s) {
    // s 是 string
    // 检查 s 中是否只包含空格

    // 返回 布尔值, 如果 s 中包含的只有空格则返回 true, 否则返回 false

    // 提示:
    // 遍历 s 中的所有字符, 其中如果包含非空格字符, 返回 false, 否则返回 true
    if(s.length() == 0){
        return false
    }
    var i = 0
    while(i < s.length()){
        if(s[i] != ' '){
            return false
        }
        i += 1
    }
    return true
    // 实现步骤
    // 1. 如果是一个空字符串返回 false
    // 2. 遍历 s 中的每个字符
    // 3. 如果字符不是空格, 返回 false
    // 4. 在循环结束后, 返回 true
}

const is_digit = function(s) {
    // s 是字符串
    // 检查 s 中是否只包含数字
    // 返回: 布尔值

    var strnumber = '0123456789'
    if(s.length() == 0){
        return false
    }
    var i = 0
    while(i < s.length()){

        //判断是否为数字
        var j = 0
        var isnumber = false
        while(j < strnumber.length()){
            if(s[i] == strnumber[j]){
                isnumber = true
                break
            }
            j += 1
        }

        //如果有一个不是数字则返回false
        if(isnumber == false){
            return false
        }
        i += 1
    }
    return true

    // 提示:
    // 类似于作业 5, 判断的条件从空格变为了数字

    // 实现步骤
    // 1. 复制 is_space 函数中的代码
    // 2. 将判断字符是否为空格的部分改为判断是否为数字
    //     通过判断字符是否在字符串 '0123456789' 中, 来判断其是否为数字
}

const strip_left = function(s) {
    // s 是 string
    // 返回一个「删除了字符串开始的所有空格」的字符串

    // 返回 string

    if(is_space(s)){
        return ''
    }

    var i = 0
    while(i < s.length()){
        if(s[i] != ' '){
            break
        }
         i += 1
    }
    var str = s.cut(i,s.length())
    return str
    // 实现步骤
    // 从左侧遍历字符串, 记录第一个非空格字符的位置, 并由此切割字符串
    // 1. 使用作业 5 的 is_space 函数来判断 s 是否只包含空格，
    //    如果 s 只包含空格，返回空字符串
    // 2. 遍历字符串找到不是空格的字符的下标
    // 3. 切片并返回
}

const strip_right = function(s) {
    // s 是 string
    // 返回一个「删除了字符串末尾的所有空格」的字符串

    // 返回 string

    if(is_space(s)){
        return ''
    }

    var i = s.length() - 1
    while(i >= 0){
        if(s[i] != ' '){
            break
        }
         i -= 1
    }
    var str = s.cut(0,i+1)
    return str

    // 提示:
    // 类似于作业 7
    // 区别在于这次需要从右至左遍历字符串

    // 实现步骤
    // 1. 创建一个循环, 从右到左遍历字符串
    //     从右到左遍历的方式是让数字从 n 到 0
    // 2. 遍历字符串找到不是空格的字符的下标
    // 3. 切片并返回
}

const strip = function(s) {
    // s 是 string
    // 返回一个「删除了字符串首尾的所有空格」的字符串

    // 返回 string
    var str = ''
    str = strip_left(s)
    str = strip_right(str)
    return str
    // 提示:
    // 依次调用作业 7 和作业 8 中的函数即可

    // 分布提示:
    // 1. 调用 strip_left
    // 2. 对上一步的结果继续调用 strip_right
    // 3. 返回结果
}

const replace = function(s, old_str, new_str) {
    // 3 个参数 s old_str new_str 都是字符串
    // 返回一个「将 s 中的 old_str 字符串替换为 new_str 字符串」的字符串
    // 假设 old 存在并且只出现一次

    // 返回 string

    var xb1 = 0
    var xb2 = 0
    var i = 0
    while(i < s.length()){
        if(s[i] == old_str[0]){

            xb1 = i
            var isbl = true
            var j = 1
            while(j < old_str.length()){
                if(old_str[j] != s[i + j]){
                    isbl = false
                    break
                }
                j += 1
            }

            if(isbl){
                xb2 = i + j
                break
            }

        }
         i += 1
    }
    var str1 = s.cut(0 , xb1)
    var str2 = s.cut(xb2 , s.length())
    var str = str1 + new_str + str2
    return str
    // 提示:
    // 找到指定旧字符串的起始下标, 将其前后字符串与新字符串进行拼接

    // 实现步骤
    // 1. 找到 old_str 的下标
    // 2. 把 s 切成 2 个不包含 old_str 的字符串
    // 3. 拼接并返回结果
}

// 测试函数
const test_replace = function() {
    ensure(replace('guagua', 'ag', 'l') == 'gulua', 'replace 测试 1')
    ensure(replace('g  ', '  ', 'a') == 'ga', 'replace 测试 2')
    ensure(replace('l', 'l', '') == '', 'replace 测试 3')
}

test_replace()
